{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LENOVO\\\\Desktop\\\\table\\\\src\\\\components\\\\Table\\\\Table.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport './Table.css';\nimport { useState } from \"react\"; //сделать функцию для sort ( вместо ключа описать функцию sortingKey:'translation')\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Table(props) {\n  _s();\n\n  const [key, setKey] = useState(null);\n\n  function sortColumn(key) {\n    setKey(prev => {\n      console.log(key);\n      console.log(prev === null || prev === void 0 ? void 0 : prev.key);\n\n      if (prev !== null && prev.key === key) {\n        return {\n          key: key,\n          stateKey: !prev.stateKey\n        };\n      } else {\n        return {\n          key: key,\n          stateKey: true\n        };\n      }\n    });\n  }\n\n  const cloneData = props.data.concat();\n\n  if (key !== null) {\n    if (key.stateKey) {\n      cloneData.sort((a, b) => a[key.key] < b[key.key] ? -1 : 1);\n    } else {\n      cloneData.sort((a, b) => a[key.key] > b[key.key] ? -1 : 1);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: props.columns.map(column => {\n          return /*#__PURE__*/_jsxDEV(\"th\", {\n            onClick: () => sortColumn(column.sortingKey),\n            children: [\" \", column.title]\n          }, column.title, true, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 32\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: cloneData.map((word, i) => {\n        return /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: props.columns.map(column => {\n            return /*#__PURE__*/_jsxDEV(\"td\", {\n              children: column.render(word)\n            }, column.title, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 40\n            }, this);\n          })\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Table, \"/3VqOHFC0pVUqGaF5UvSKfaSZ+s=\");\n\n_c = Table;\nexport default Table;\n\nvar _c;\n\n$RefreshReg$(_c, \"Table\");","map":{"version":3,"names":["React","useState","Table","props","key","setKey","sortColumn","prev","console","log","stateKey","cloneData","data","concat","sort","a","b","columns","map","column","sortingKey","title","word","i","render"],"sources":["C:/Users/LENOVO/Desktop/table/src/components/Table/Table.tsx"],"sourcesContent":["import React from \"react\";\r\nimport './Table.css';\r\nimport { useState } from \"react\";\r\n\r\n//сделать функцию для sort ( вместо ключа описать функцию sortingKey:'translation')\r\n\r\nexport interface Column<T> {\r\n    title: string;\r\n    render: (w: T) => string;\r\n    sortingKey: keyof T;\r\n \r\n}\r\n\r\ninterface PropsType<T> {\r\n    data: T[];\r\n    columns: Column<T>[];\r\n}\r\n\r\ninterface State<T> {\r\n    key: keyof T,\r\n    stateKey: boolean\r\n}\r\n\r\n\r\nexport function Table<T>(props: PropsType<T>) {\r\n\r\n    const [key, setKey] = useState<State<T> | null>(null);\r\n\r\n    function sortColumn(key: keyof T) {\r\n     \r\n        setKey((prev) => {\r\n            console.log(key)\r\n            console.log(prev?.key)\r\n            if (prev !== null && prev.key === key) {\r\n                return {\r\n                    key: key,\r\n                    stateKey: !prev.stateKey\r\n                }\r\n            } else {\r\n                return {\r\n                    key: key,\r\n                    stateKey: true\r\n\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    const cloneData = props.data.concat();\r\n    if (key !== null) {\r\n        if (key.stateKey) {\r\n            cloneData.sort((a, b) => a[key.key] < b[key.key] ? -1 : 1)\r\n        } else {\r\n            cloneData.sort((a, b) => a[key.key] > b[key.key] ? -1 : 1)\r\n        }\r\n    }\r\n \r\n    return (\r\n        <table>\r\n            <thead>\r\n                <tr>\r\n                    {props.columns.map((column) => {\r\n                        return <th key={column.title} onClick={() => sortColumn(column.sortingKey)}> {column.title}</th>;\r\n                    })}\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {cloneData.map((word, i) => {\r\n                    return (\r\n                        <tr key={i}>\r\n                            {props.columns.map((column) => {\r\n                                return <td key={column.title}>{column.render(word)}</td>;\r\n                            })}\r\n                        </tr>\r\n\r\n                    );\r\n                })}\r\n            </tbody>\r\n        </table>\r\n    );\r\n}\r\n\r\n\r\nexport default Table;\r\n"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,aAAP;AACA,SAASC,QAAT,QAAyB,OAAzB,C,CAEA;;;AAoBA,OAAO,SAASC,KAAT,CAAkBC,KAAlB,EAAuC;EAAA;;EAE1C,MAAM,CAACC,GAAD,EAAMC,MAAN,IAAgBJ,QAAQ,CAAkB,IAAlB,CAA9B;;EAEA,SAASK,UAAT,CAAoBF,GAApB,EAAkC;IAE9BC,MAAM,CAAEE,IAAD,IAAU;MACbC,OAAO,CAACC,GAAR,CAAYL,GAAZ;MACAI,OAAO,CAACC,GAAR,CAAYF,IAAZ,aAAYA,IAAZ,uBAAYA,IAAI,CAAEH,GAAlB;;MACA,IAAIG,IAAI,KAAK,IAAT,IAAiBA,IAAI,CAACH,GAAL,KAAaA,GAAlC,EAAuC;QACnC,OAAO;UACHA,GAAG,EAAEA,GADF;UAEHM,QAAQ,EAAE,CAACH,IAAI,CAACG;QAFb,CAAP;MAIH,CALD,MAKO;QACH,OAAO;UACHN,GAAG,EAAEA,GADF;UAEHM,QAAQ,EAAE;QAFP,CAAP;MAKH;IACJ,CAfK,CAAN;EAgBH;;EAED,MAAMC,SAAS,GAAGR,KAAK,CAACS,IAAN,CAAWC,MAAX,EAAlB;;EACA,IAAIT,GAAG,KAAK,IAAZ,EAAkB;IACd,IAAIA,GAAG,CAACM,QAAR,EAAkB;MACdC,SAAS,CAACG,IAAV,CAAe,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACX,GAAG,CAACA,GAAL,CAAD,GAAaY,CAAC,CAACZ,GAAG,CAACA,GAAL,CAAd,GAA0B,CAAC,CAA3B,GAA+B,CAAxD;IACH,CAFD,MAEO;MACHO,SAAS,CAACG,IAAV,CAAe,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACX,GAAG,CAACA,GAAL,CAAD,GAAaY,CAAC,CAACZ,GAAG,CAACA,GAAL,CAAd,GAA0B,CAAC,CAA3B,GAA+B,CAAxD;IACH;EACJ;;EAED,oBACI;IAAA,wBACI;MAAA,uBACI;QAAA,UACKD,KAAK,CAACc,OAAN,CAAcC,GAAd,CAAmBC,MAAD,IAAY;UAC3B,oBAAO;YAAuB,OAAO,EAAE,MAAMb,UAAU,CAACa,MAAM,CAACC,UAAR,CAAhD;YAAA,gBAAuED,MAAM,CAACE,KAA9E;UAAA,GAASF,MAAM,CAACE,KAAhB;YAAA;YAAA;YAAA;UAAA,QAAP;QACH,CAFA;MADL;QAAA;QAAA;QAAA;MAAA;IADJ;MAAA;MAAA;MAAA;IAAA,QADJ,eAQI;MAAA,UACKV,SAAS,CAACO,GAAV,CAAc,CAACI,IAAD,EAAOC,CAAP,KAAa;QACxB,oBACI;UAAA,UACKpB,KAAK,CAACc,OAAN,CAAcC,GAAd,CAAmBC,MAAD,IAAY;YAC3B,oBAAO;cAAA,UAAwBA,MAAM,CAACK,MAAP,CAAcF,IAAd;YAAxB,GAASH,MAAM,CAACE,KAAhB;cAAA;cAAA;cAAA;YAAA,QAAP;UACH,CAFA;QADL,GAASE,CAAT;UAAA;UAAA;UAAA;QAAA,QADJ;MAQH,CATA;IADL;MAAA;MAAA;MAAA;IAAA,QARJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAuBH;;GAxDerB,K;;KAAAA,K;AA2DhB,eAAeA,KAAf"},"metadata":{},"sourceType":"module"}